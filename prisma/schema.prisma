// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bin {
  id          String    @id @default(uuid())
  label       String    @unique @db.VarChar(100)
  location    String    @db.VarChar(200)
  qrCode      String    @map("qr_code")
  description String?   @db.VarChar(500)
  imageUrl    String?   @map("image_url") @db.VarChar(1000)
  imageKey    String?   @map("image_key") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  items       BinItem[]
  qrCodes     QrCode[]

  @@index([label])
  @@index([location])
  @@map("bins")
}

model Item {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(200)
  description String    @db.VarChar(1000)
  categoryId  String    @map("category_id")
  quantity    Int       @default(0)
  minQuantity Int?      @map("min_quantity")
  unit        String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  category    Category  @relation(fields: [categoryId], references: [id])
  bins        BinItem[]

  @@index([name])
  @@index([categoryId])
  @@map("items")
}

model BinItem {
  binId     String   @map("bin_id")
  itemId    String   @map("item_id")
  quantity  Int
  addedAt   DateTime @default(now()) @map("added_at")
  notes     String?  @db.VarChar(500)
  bin       Bin      @relation(fields: [binId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@id([binId, itemId])
  @@map("bin_items")
}

model Category {
  id       String     @id @default(uuid())
  name     String     @db.VarChar(100)
  parentId String?    @map("parent_id")
  path     String[]
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  items    Item[]

  @@index([name])
  @@index([path])
  @@map("categories")
}

model QrCode {
  id        String    @id @default(uuid())
  binId     String    @map("bin_id")
  shortCode String    @unique @db.VarChar(50)
  data      Json
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  bin       Bin       @relation(fields: [binId], references: [id])

  @@index([shortCode])
  @@index([binId])
  @@map("qr_codes")
}

// NextAuth.js Models
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}
