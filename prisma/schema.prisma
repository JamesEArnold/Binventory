// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bin {
  id              String    @id @default(uuid())
  label           String    @db.VarChar(100)
  location        String    @db.VarChar(200)
  qrCode          String    @map("qr_code")
  description     String?   @db.VarChar(500)
  imageUrl        String?   @map("image_url") @db.VarChar(1000)
  imageKey        String?   @map("image_key") @db.VarChar(255)
  userId          String?   @map("user_id")
  organizationId  String?   @map("organization_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  items           BinItem[]
  qrCodes         QrCode[]
  user            User?     @relation(fields: [userId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@unique([label, userId])
  @@index([label])
  @@index([location])
  @@index([userId])
  @@index([organizationId])
  @@map("bins")
}

model Item {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(200)
  description     String    @db.VarChar(1000)
  categoryId      String    @map("category_id")
  quantity        Int       @default(0)
  minQuantity     Int?      @map("min_quantity")
  unit            String
  userId          String?   @map("user_id")
  organizationId  String?   @map("organization_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  category        Category  @relation(fields: [categoryId], references: [id])
  bins            BinItem[]
  user            User?     @relation(fields: [userId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@index([name])
  @@index([categoryId])
  @@index([userId])
  @@index([organizationId])
  @@map("items")
}

model BinItem {
  binId     String   @map("bin_id")
  itemId    String   @map("item_id")
  quantity  Int
  addedAt   DateTime @default(now()) @map("added_at")
  notes     String?  @db.VarChar(500)
  bin       Bin      @relation(fields: [binId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@id([binId, itemId])
  @@map("bin_items")
}

model Category {
  id              String     @id @default(uuid())
  name            String     @db.VarChar(100)
  parentId        String?    @map("parent_id")
  path            String[]
  userId          String?    @map("user_id")
  organizationId  String?    @map("organization_id")
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  items           Item[]
  user            User?      @relation(fields: [userId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@index([name])
  @@index([path])
  @@index([userId])
  @@index([organizationId])
  @@map("categories")
}

model QrCode {
  id        String    @id @default(uuid())
  binId     String    @map("bin_id")
  shortCode String    @unique @db.VarChar(50)
  data      Json
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  bin       Bin       @relation(fields: [binId], references: [id])

  @@index([shortCode])
  @@index([binId])
  @@map("qr_codes")
}

// NextAuth.js Models
model User {
  id                String               @id @default(uuid())
  name              String?
  email             String               @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role                 @default(USER)
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  accounts          Account[]
  sessions          Session[]
  twoFactorAuth     TwoFactorAuth?
  bins              Bin[]
  items             Item[]
  categories        Category[]
  organizationMemberships OrganizationMember[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Two-Factor Authentication
model TwoFactorAuth {
  id            String   @id @default(uuid())
  userId        String   @unique @map("user_id")
  secret        String
  verified      Boolean  @default(false)
  recoveryCodes String[] @map("recovery_codes")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// Security Audit Log
model AuditLog {
  id          String    @id @default(uuid())
  userId      String?   @map("user_id")
  action      String
  entity      String?
  entityId    String?   @map("entity_id")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// Organization Models for multi-tenant collaboration
model Organization {
  id            String    @id @default(uuid())
  name          String
  slug          String    @unique
  description   String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relationships
  memberships   OrganizationMember[]
  bins          Bin[]
  items         Item[]
  categories    Category[]
  
  @@map("organizations")
}

model OrganizationMember {
  id              String    @id @default(uuid())
  organizationId  String    @map("organization_id")
  userId          String    @map("user_id")
  role            OrgRole   @default(MEMBER)
  joinedAt        DateTime  @default(now()) @map("joined_at")
  invitedBy       String?   @map("invited_by")
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@map("organization_members")
}

enum OrgRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
  MEMBER
}

enum Role {
  USER
  ADMIN
}

// Object-level Permission System
model Permission {
  id             String       @id @default(uuid())
  objectType     String       // 'bin', 'item', 'category'
  objectId       String       // The ID of the object
  subjectType    String       // 'user', 'organization', 'role'
  subjectId      String       // The ID of the subject
  action         String       // 'read', 'write', 'admin'
  grantedBy      String?      // User ID who granted permission
  grantedAt      DateTime     @default(now()) @map("granted_at")
  
  @@unique([objectType, objectId, subjectType, subjectId, action])
  @@index([objectType, objectId])
  @@index([subjectType, subjectId])
  @@map("permissions")
}
